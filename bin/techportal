#!/usr/bin/env php
<?php

declare(strict_types=1);

require_once __DIR__.'/../vendor/autoload.php';

main($argv);

function main($argv): void
{
    if (count($argv) < 2) {
        echo 'Usage: php bin/techportal <command> [args..]'.PHP_EOL;
        echo 'Available commands: dev:setup, local:setup'.PHP_EOL;
        exit(1);
    }

    $command = $argv[1];

    switch ($command) {
        case 'test:setup':
            if (!databaseUrlIsSqlite()) {
                run('php bin/console --env=test doctrine:database:drop --no-interaction --force --if-exists');
                run('php bin/console --env=test doctrine:database:create --no-interaction');
            }

            run('php bin/console --env=test doctrine:schema:create --no-interaction');
            run('php bin/console --env=test doctrine:fixtures:load --no-interaction');
            run('php bin/console cache:clear --no-warmup');
            break;
        case 'dev:setup':
            run('php bin/console doctrine:database:drop --no-interaction --force --if-exists');
            run('php bin/console doctrine:database:create --no-interaction');
            run('php bin/console doctrine:schema:create --no-interaction');
            run('php bin/console doctrine:fixtures:load --no-interaction');
            run('php bin/console cache:clear --no-warmup');
            setLockFile();
    }
}

function run(string $cmd): void
{
    echo ">>> Running {$cmd}";
    passthru($cmd, $exitCode);
    if (0 !== $exitCode) {
        echo "Command failed with exit code {$exitCode}\n";
        exit($exitCode);
    }
}

function removeLockFile(): void
{
    $lockFile = __DIR__.'/../var/install.lock';

    if (file_exists($lockFile)) {
        unlink($lockFile);
    }
}

function setLockFile(): void
{
    $lockFile = __DIR__.'/../var/install.lock';
    if (!file_exists($lockFile)) {
        fopen($lockFile, 'wb');
    }
}

function databaseUrlIsSqlite(): bool
{
    $dotenv = new Symfony\Component\Dotenv\Dotenv();

    $dotenv->loadEnv(__DIR__.'/../.env.test');

    return str_contains($_ENV['DATABASE_URL'], 'sqlite');
}
